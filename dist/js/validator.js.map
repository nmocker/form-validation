{"version":3,"sources":["validator.js"],"names":["Validator","parameters","console","log","options","Object","assign","selector","errorMessage","error","elements","document","querySelectorAll","warn","i","length","addEventListener","touched","evt","validate","event","isValid","$el","target","field","classList","add","parentElement","querySelector","innerHTML","style","backgroundColor","remove"],"mappings":";;;;;;;;;;IAAMA,S;AAMJ,qBAAYC,UAAZ,EAAwB;AAAA;;AAAA;;AAAA,qCALd,IAKc;;AAAA,qCAJd,KAIc;;AAAA,qCAFd,EAEc;;AAAA,wCAgEX,YAAM;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD,KAlEuB;;AACtBD,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,UAA3B;AACA,SAAKG,OAAL,GAAeC,MAAM,CAACC,MAAP,CACb,EADa,EAEb;AACEC,MAAAA,QAAQ,EAAE,IADZ;AAEEC,MAAAA,YAAY,EAAE;AAFhB,KAFa,EAMbP,UANa,CAAf;AAQA,QAAMM,QAAQ,GAAG,KAAKH,OAAL,CAAaG,QAA9B;;AACA,QAAI,CAACA,QAAL,EAAe;AACbL,MAAAA,OAAO,CAACO,KAAR,CAAc,8BAAd,EADa,CACkC;AAC/C;AACD;;AAEDP,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCI,QAAvC;AACA,QAAMG,QAAQ,GAAGC,QAAQ,CAACC,gBAAT,CAA0BL,QAA1B,CAAjB,CAjBsB,CAmBtB;AACA;;AACA,QAAI,CAACG,QAAL,EAAe;AACbR,MAAAA,OAAO,CAACW,IAAR,CAAa,+CAAb,EAA8DN,QAA9D;AACA;AACD,KAxBqB,CA0BtB;AACA;AACA;AACA;;;AAEA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,QAAQ,CAACK,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxCJ,MAAAA,QAAQ,CAACI,CAAD,CAAR,CAAYE,gBAAZ,CAA6B,OAA7B,EAAsC,YAAM;AAC1C,QAAA,KAAI,CAACC,OAAL,GAAe,IAAf;AACD,OAFD,EADwC,CAIxC;;AACAP,MAAAA,QAAQ,CAACI,CAAD,CAAR,CAAYE,gBAAZ,CAA6B,OAA7B,EAAsC,UAACE,GAAD;AAAA,eAAS,KAAI,CAACC,QAAL,CAAcD,GAAd,CAAT;AAAA,OAAtC;AACD;AACF;;;;6BAEQE,K,EAAO;AACdlB,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD;;;mCAEciB,K,EAAO;AACpBlB,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACD;;;kCAEaiB,K,EAAO;AACnBlB,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkD,KAAKkB,OAAvD;AACA,UAAMC,GAAG,GAAGF,KAAK,CAACG,MAAlB;AACA,UAAIC,KAAK,GAAGb,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAZ;;AACA,UAAI,CAAC,KAAKS,OAAV,EAAmB;AACjBC,QAAAA,GAAG,CAACG,SAAJ,CAAcC,GAAd,CAAkB,SAAlB;AACAJ,QAAAA,GAAG,CAACK,aAAJ,CAAkBC,aAAlB,CACE,gBADF,EAEEC,SAFF,GAEc,KAAKzB,OAAL,CAAaI,YAF3B;AAGAgB,QAAAA,KAAK,CAACM,KAAN,CAAYC,eAAZ,GAA8B,KAA9B;AACD,OAND,MAMO;AACLT,QAAAA,GAAG,CAACG,SAAJ,CAAcO,MAAd,CAAqB,SAArB;AACAV,QAAAA,GAAG,CAACK,aAAJ,CAAkBC,aAAlB,CAAgC,gBAAhC,EAAkDC,SAAlD,GAA8D,EAA9D;AACD;AACF","sourcesContent":["class Validator {\n  isValid = true;\n  touched = false;\n\n  options = {};\n\n  constructor(parameters) {\n    console.log(\"Validator()\", parameters);\n    this.options = Object.assign(\n      {},\n      {\n        selector: null,\n        errorMessage: \"Invalid value\",\n      },\n      parameters\n    );\n    const selector = this.options.selector;\n    if (!selector) {\n      console.error(\"Must provide a selector key!\"); // this is a soft error, like a slap on the wrist\n      // throw new Error(\"Must provide a selector key!\") // this blows up the whole app\n    }\n\n    console.log(\"setting up listener for\", selector);\n    const elements = document.querySelectorAll(selector);\n\n    // two ways to handle this part\n    // 1: my preferred way\n    if (!elements) {\n      console.warn(\"No elements matching the selector were found!\", selector);\n      return;\n    }\n\n    // 2: but this is fine too, just a little clunkier\n    // if (element) {\n    //     // do the setup here\n    // }\n\n    for (var i = 0; i < elements.length; i++) {\n      elements[i].addEventListener(\"focus\", () => {\n        this.touched = true;\n      });\n      // elements[i].addEventListener(\"blur\", (evt) => this.validate(evt));\n      elements[i].addEventListener(\"keyup\", (evt) => this.validate(evt));\n    }\n  }\n\n  validate(event) {\n    console.log(\"Validator.validate()\");\n  }\n\n  validateBefore(event) {\n    console.log(\"Validator.validateBefore()\");\n  }\n\n  validateAfter(event) {\n    console.log(\"Validator.validateAfter() isValid?\", this.isValid);\n    const $el = event.target;\n    let field = document.querySelectorAll(\"input\");\n    if (!this.isValid) {\n      $el.classList.add(\"invalid\");\n      $el.parentElement.querySelector(\n        \".error-message\"\n      ).innerHTML = this.options.errorMessage;\n      field.style.backgroundColor = \"red\";\n    } else {\n      $el.classList.remove(\"invalid\");\n      $el.parentElement.querySelector(\".error-message\").innerHTML = \"\";\n    }\n  }\n\n  showErrors = () => {\n    console.log(\"showing errors\");\n  };\n}\n"],"file":"validator.js"}